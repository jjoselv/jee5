/* Generated by Together */

package patrones.comportamiento.interprete;

import java.util.StringTokenizer;
import java.util.Properties;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;

public class Interprete {

    private static final Logger LOG = Logger.getLogger(Interprete.class.getName());
    
    public Interprete() {
        this.orden = new Orden1();
    }

    private boolean aceptarOrden(String texto) {
        try {
            String copia = texto.trim().toUpperCase();
            if (copia.length() == 0) {
                throw new InterpreteException("La orden está vacía");
            } else {
                StringTokenizer st = new StringTokenizer(copia);
                Properties propiedades = new Properties();
                propiedades.setProperty("NOMBRE", st.nextToken());
                for (int i = 1; st.hasMoreTokens(); i++) {
                    propiedades.setProperty("PARAMETRO" + i, st.nextToken());
                }
                return getOrden().ejecutar(propiedades);
            }
        }
        catch (NullPointerException | InterpreteException e) {
            LOG.log(Level.SEVERE, "Error", e);
            return true;
        }
    }

    public Orden getOrden() { return orden; }

    public void setOrden(Orden orden) { this.orden = orden; }

    public void buclePrincipal() {
        try {
            InputStreamReader isr = new InputStreamReader(System.in);
            BufferedReader br = new BufferedReader(isr);
            String texto;
            do {
                System.out.println("orden> ");
                texto = br.readLine();
            } while (aceptarOrden(texto));
        }
        catch (IOException e) {
            LOG.log(Level.SEVERE, "Error", e);            
            System.exit(-1);
        }
    }

    private Orden orden;
}

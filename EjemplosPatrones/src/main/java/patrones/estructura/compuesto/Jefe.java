/* Generated by Together */
package patrones.estructura.compuesto;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

public class Jefe implements Empleado {

    @Override
    public Jefe getCompuesto() {
        return this;
    }

    @Override
    public double obtenerSueldo() {
        double sueldoTotal = getSueldo();
        Iterator<Empleado> components = empleados();
        while (components.hasNext()) {
            sueldoTotal += components.next().obtenerSueldo();
        }
        return sueldoTotal;
    }

    @Override
    public void nuevo(Empleado empleado) {
        empleadosLista.add(empleado);
    }

    @Override
    public void eliminar(Empleado empleado) {
        empleadosLista.remove(empleado);
    }

    @Override
    public Iterator<Empleado> empleados() {
        return empleadosLista.iterator();
    }

    @Override
    public double getSueldo() {
        return sueldo;
    }

    @Override
    public void setSueldo(double sueldo) {
        this.sueldo = sueldo;
    }

    /**
     * @associates <{Empleado}>
     * @link aggregation
     * @supplierCardinality 0..*
     */
    private final List<Empleado> empleadosLista = new ArrayList<>();
    private double sueldo;
}

/* Generated by Together */

package patrones.estructura.puente.almacenamiento.almacenes;

import java.util.ArrayList;
import java.util.Iterator;
import patrones.estructura.puente.almacenamiento.operaciones.Operacion;
import java.io.ObjectInputStream;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.FileOutputStream;

class ImplementadorArchivo implements Implementador {
    public ImplementadorArchivo(String nombreArchivo) {
        setArchivo(nombreArchivo);
        leerArchivo();
    }

    /** Generated by Together on 05-abr-03 */
    private void leerArchivo() {
        try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream(getArchivo()))) {
            ArrayList arr = (ArrayList)ois.readObject();
        }
        catch (FileNotFoundException e) {
            e.printStackTrace();
        }
        catch (IOException e) {
            e.printStackTrace();
        }
        catch (ClassNotFoundException e) {
            e.printStackTrace();
        }
    }

    @Override
    public void terminar() {
        // Write your code here
        try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(getArchivo()))) {
            oos.writeObject(getElementos());
        }
        catch (FileNotFoundException e) {
            e.printStackTrace();
        }
        catch (IOException e) {
            e.printStackTrace();
        }
    }

    public String getArchivo() { return archivo; }

    public final void setArchivo(String archivo) { this.archivo = archivo; }

    public ArrayList getElementos() {
        if (elementos == null) {
            elementos = new ArrayList();
        }
        return elementos;
    }

    public void setElementos(ArrayList elementos) { this.elementos = elementos; }

    @Override
    public Iterator ejecutar(Operacion objeto) {
        // Write your code here
        switch (objeto.getTipo()) {
            case Operacion.INSERTAR:
                getElementos().add(objeto.getDelegado());
                return getElementos().iterator();
            default:
                return null;
        }
    }

    private String archivo;
    private ArrayList elementos;
}

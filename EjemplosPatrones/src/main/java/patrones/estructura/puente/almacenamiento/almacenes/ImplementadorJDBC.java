/* Generated by Together */

package patrones.estructura.puente.almacenamiento.almacenes;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.Iterator;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import patrones.estructura.puente.almacenamiento.operaciones.Operacion;

class ImplementadorJDBC implements Implementador, Iterator {
    public ImplementadorJDBC(String url, String driver, String usuario, String clave) {
        setUrl(url);
        setDriver(driver);
        setUsuario(usuario);
        setClave(clave);
    }

    @Override
    public void terminar() {
        // Write your code here
        try {
            getConexion().close();
        }
        catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public String getUrl() { return url; }

    public final void setUrl(String url) { this.url = url; }

    public String getDriver() { return driver; }

    public final void setDriver(String driver) { this.driver = driver; }

    public Connection getConexion() {
        if (conexion == null) {
            try {
                Class.forName(getDriver());
                conexion = DriverManager.getConnection(getUrl(), getUsuario(), getClave());
            }
            catch (ClassNotFoundException | SQLException e) {
                e.printStackTrace();
            }
        }
        return conexion;
    }

    @Override
    public Iterator ejecutar(Operacion objeto) {
        // Write your code here
        try {
            if (getResultSet() != null) {
                getResultSet().close();
            }
            if (getSentencia() != null) {
                getSentencia().close();
            }
        }
        catch (SQLException e) {
            e.printStackTrace();
        }
        String orden = objeto.getDelegado().toString().toUpperCase();
        try {
            setSentencia(getConexion().createStatement());
            if (orden.startsWith("SELECT")) {
                setResultSet(getSentencia().executeQuery(orden));
                setMetaDatos(getResultSet().getMetaData());
                return this;
            } else {
                getSentencia().executeUpdate(orden);
                return null;
            }
        }
        catch (SQLException e) {
            e.printStackTrace();
            return null;
        }
    }

    @Override
    public boolean hasNext() {
        // Write your code here
        try {
            return getResultSet().next();
        }
        catch (SQLException e) {
            e.printStackTrace();
            return false;
        }
    }

    @Override
    public Object next() {
        // Write your code here
        try {
            int col = getMetaDatos().getColumnCount();
            String[] resultado = new String[col];
            for (int i = 0; i < col; i++) {
                resultado[i] = getResultSet().getString(i + 1);
            }
            return resultado;
        }
        catch (SQLException e) {
            e.printStackTrace();
            return null;
        }
    }

    @Override
    public void remove() {
        // Write your code here
        throw new RuntimeException("MÃ©todo no soportado");
    }

    public ResultSet getResultSet() {
        return resultSet;
    }

    public void setResultSet(ResultSet rs) {
        this.resultSet = rs;
    }

    public Statement getSentencia() {
        return sentencia;
    }

    public void setSentencia(Statement st) {
        this.sentencia = st;
    }

    public ResultSetMetaData getMetaDatos() {
        return metaDatos;
    }

    public void setMetaDatos(ResultSetMetaData metaDatos) { this.metaDatos = metaDatos; }

    public String getClave() { return clave; }

    public final void setClave(String clave) { this.usuario = clave; }

    public String getUsuario() { return usuario; }

    public final void setUsuario(String usuario) { this.usuario = usuario; }

    private String url;
    private String driver;
    private Connection conexion;
    private Statement sentencia = null;
    private ResultSet resultSet = null;
    private ResultSetMetaData metaDatos;
    private String clave;
    private String usuario;
}
